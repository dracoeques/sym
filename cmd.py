import click
import os

@click.command()
@click.option("--c", prompt="Enter command")
@click.option("--env", default="dev")
def main(c, env):
    print(f"Command: {c}")

    stage = os.environ.get("stage")
    cur_dir = os.getcwd()
    db_migrations_base = "./symdb" 

    if c == "migrate":
        #move to migration folder, run autogenerated migration, return to base directory
        db_migrations_path = f"{db_migrations_base}/{stage}/"
        print(db_migrations_path)
        os.chdir(db_migrations_path)
        code = os.system("alembic revision --autogenerate")
        print(f"Command {c} exited with code: {code}")
        os.chdir(cur_dir)
    elif c == "upgrade":
        #move to migration folder, run upgrade, return to base directory
        db_migrations_path = f"{db_migrations_base}/{stage}/"
        os.chdir(db_migrations_path)
        code = os.system("alembic upgrade head")
        print(f"Command {c} exited with code: {code}")
        os.chdir(cur_dir)

    elif c == "build":
        os.chdir("front")
        code = os.system("yarn build")
        print(f"Build exited with code: {code}")
        os.chdir(cur_dir)
        code = os.system(f"rm -r ./sym/vitedist")  
        code = os.system(f"cp -r ./front/dist ./sym/vitedist")

        #build dockerfile to confirm nothing fails
        #code = os.system(f"docker build -t sym .")
    elif c == "deploy":
        #build and deploy the app & frontend
        os.chdir("front")
        code = os.system("yarn build")
        print(f"Build exited with code: {code}")
        os.chdir(cur_dir)
        aws_profile = os.environ.get("AWS_PROFILE", "")
        eb_env = "Sym-dev-env"
        if env == "pro":
            eb_env = "Sym-pro-env1"
        code = os.system(f"eb deploy {eb_env} --profile {aws_profile}")
        print(f"Deploy frontend exited with code: {code}")
        # deploy chalice
        #code = 

    
if __name__ == "__main__":
    main()
