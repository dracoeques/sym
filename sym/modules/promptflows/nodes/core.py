from dataclasses import dataclass

from sym.modules.db.models import Node as NodeRecord
from sym.modules.db.models import Edge as EdgeRecord

@dataclass
class PromptNode:

    id: int = None #corresponding id for the node in the db
    node_type: str = None 
    
    async def run(
            self, 
            input_payload=None, #optional dict of any variables / values passed to this node
            session=None, #optional db session if needed by node
            id_profile=None, #optional id of sym profile used for personalization
        ):
        """ Run our node, emit our output json payload"""
        pass

    def from_node_record(self, node_record):
        """ Given a node_record build this node"""
        self.id = node_record.id
        self.node_type = node_record.node_type
        return self

    def get_next_node_ids(self, edges=None):
        """ Given our edges, determine
            the next nodes to run
        """
        if edges is None:
            return []
        
        target_node_ids = []
        for _,edge in edges.items():
            if edge.start_node_id == self.id:
                target_node_ids.append(edge.end_node_id)
        return target_node_ids
    

    def to_messages(self, output_payload=None):
        """ Given this node, generate a list of messages like in a chatgpt chat history
        
        """
        return []
    
    def get_outputs(self, output_payload=None):
        """ Return any variables which will be used as inputs by another node"""
        pass

    
    def update_payload(self, input_payload=None):
        #NOTE: deprecated, nodes only have 1 input 1 output step
        #in order to string complex logic, use multiple nodes in succession
        #or design composable nodes which chain multiple prompt_nodes
        pass

    def generate_output_payload(self):
        return {}
    
    

@dataclass 
class PromptEdge:

    id: int = None #corresponding id for the node in the db
    str_id: str = None #corresponding string id generated by front end

    edge_record: EdgeRecord = None #corresponding db model

    start_node_id: int = None
    end_node_id: int = None

    payload = None

    def from_edge_record(self, edge_record):
        """ Build our Edge from the corresponding db model"""
        self.id = edge_record.id
        self.edge_record = edge_record
        self.start_node_id = edge_record.start_node_id
        self.end_node_id = edge_record.end_node_id
        self.payload = edge_record.payload
        return self


